name: Generate and Deploy PDFs

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  get_directories:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.set_dirs.outputs.directories }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find directories with Markdown files
        id: set_dirs
        run: |
          DIRS=$(find . -mindepth 2 -type f -name "*.md" -printf "%h\n" | sort -u)
          echo "directories=$(echo "$DIRS" | jq -R -s -c 'split("\n") | map(select(length > 0))')" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get_directories
    if: needs.get_directories.outputs.directories != '[]'
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.get_directories.outputs.directories) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get directory name
        id: dir_name
        run: echo "name=$(basename "${{ matrix.directory }}")" >> $GITHUB_OUTPUT

      - name: Get files in directory
        id: files
        working-directory: ${{ matrix.directory }}
        run: |
          echo "files=$(find . -maxdepth 1 -name "*.md" -printf "\"${{ matrix.directory }}/%f\"\n" | sort | grep -v "README" | tr '\n' ' ')" >> $GITHUB_OUTPUT
          echo "files=$(find . -maxdepth 1 -name "*.md" -printf "\"${{ matrix.directory }}/%f\"\n" | sort | grep -v "README" | tr '\n' ' ')"
          
      - name: Sanitize artifact name
        id: artifact_name
        run: echo "artifact_name=$( echo "${{ steps.dir_name.outputs.name }}" )" >> $GITHUB_OUTPUT

      - name: Add date to metadata
        run: |
          echo "date: \"Generated on $(date) from commit $(git rev-parse --short HEAD)\"" >> "${{ matrix.directory }}/000-metadata.md"
          echo "---" >> "${{ matrix.directory }}/000-metadata.md"

      - name: Build PDF with Pandoc
        uses: docker://pandoc/latex:3.5
        with:
          args: >-
            --output="${{ steps.artifact_name.outputs.artifact_name }}.pdf"
            --toc
            ${{ steps.files.outputs.files }}

      - name: Move pdf to output dir
        run: |
          mkdir -p "build-${{ steps.artifact_name.outputs.artifact_name }}"
          mv "${{ steps.artifact_name.outputs.artifact_name }}.pdf" "./build-${{ steps.artifact_name.outputs.artifact_name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.artifact_name.outputs.artifact_name }}"
          path: "./build-${{ steps.artifact_name.outputs.artifact_name }}"

  generate-index:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create index.html
        run: |
          mkdir -p build
          cat << EOF > ./build/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>FRC Software Manuals</title>
              <style>
                  body { font-family: sans-serif; line-height: 1.6; padding: 2em; background-color: #f4f4f4; }
                  h1 { color: #333; }
                  ul { list-style-type: none; padding: 0; }
                  li { margin-bottom: 0.5em; }
                  a { text-decoration: none; color: #007bff; transition: color 0.3s ease; }
                  a:hover { color: #0056b3; }
              </style>
          </head>
          <body>
              <h1>Links</h1>
              <ul>
          EOF
          find . -type d -mindepth 1 | sort | while read -r dir; do
              dir_name="$(basename "$dir")"
              if ! [[ "$dir_name" =~ ^20[0-9]{2}(F|S)_ ]]; then
                continue
              fi
              link_text="$(echo "$dir_name").pdf"
              echo "        <li><a href=\"$link_text\">$dir_name</a></li>" >> ./build/index.html
          done
          cat << EOF >> ./build/index.html
              </ul>
          </body>
          </html>
          EOF

      - name: Upload index artifact
        uses: actions/upload-artifact@v4
        with:
          name: "index"
          path: "./build"

  merge-and-deploy:
    needs: generate-index
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Merge artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          delete-merged: true
      - name: Make directory for files
        run: mkdir -p build
      - name: Download artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: build
      - name: Package artifact for Github Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4



